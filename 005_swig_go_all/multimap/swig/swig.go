/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./swig/example.i

package swig

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _goslice_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef _goslice_ swig_type_3;
extern void _wrap_Swig_free_swig_1c6c3fa05f719df6(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_swig_1c6c3fa05f719df6(swig_intgo arg1);
extern swig_intgo _wrap_gcd_swig_1c6c3fa05f719df6(swig_intgo arg1, swig_intgo arg2);
extern swig_intgo _wrap_gcdmain_swig_1c6c3fa05f719df6(swig_type_1 arg1);
extern swig_intgo _wrap_count_swig_1c6c3fa05f719df6(swig_type_2 arg1, char arg2);
extern void _wrap_capitalize_swig_1c6c3fa05f719df6(swig_type_3 arg1);
extern void _wrap_circle_swig_1c6c3fa05f719df6(double arg1, double arg2);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_swig_1c6c3fa05f719df6(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_swig_1c6c3fa05f719df6(C.swig_intgo(_swig_i_0)))
	return swig_r
}

func Gcd(arg1 int, arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_gcd_swig_1c6c3fa05f719df6(C.swig_intgo(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func Gcdmain(arg1 []string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_gcdmain_swig_1c6c3fa05f719df6(*(*C.swig_type_1)(unsafe.Pointer(&_swig_i_0))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Count(arg1 string, arg2 byte) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_count_swig_1c6c3fa05f719df6(*(*C.swig_type_2)(unsafe.Pointer(&_swig_i_0)), C.char(_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Capitalize(arg1 []string) {
	_swig_i_0 := arg1
	C._wrap_capitalize_swig_1c6c3fa05f719df6(*(*C.swig_type_3)(unsafe.Pointer(&_swig_i_0)))

	arg1[0] = swigCopyString(arg1[0])

	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func Circle(arg1 float64, arg2 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_circle_swig_1c6c3fa05f719df6(C.double(_swig_i_0), C.double(_swig_i_1))
}


