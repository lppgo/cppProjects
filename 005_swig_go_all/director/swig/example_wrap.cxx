/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./swig/example.i

#define SWIGMODULE swig
#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include "director.h"


// C++ director class methods.
#include "example_wrap.h"

SwigDirector_FooBarAbstract::SwigDirector_FooBarAbstract(int swig_p)
    : FooBarAbstract(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_FooBarAbstract_swig_7fd9f15fca31a13f(intgo);
SwigDirector_FooBarAbstract::~SwigDirector_FooBarAbstract()
{
  Swiggo_DeleteDirector_FooBarAbstract_swig_7fd9f15fca31a13f(go_val);
  delete swig_mem;
}

extern "C" _gostring_ Swig_DirectorFooBarAbstract_callback_Foo_swig_7fd9f15fca31a13f(int);
std::string SwigDirector_FooBarAbstract::Foo() {
  _gostring_ result;
  
  std::string c_result;
  result = Swig_DirectorFooBarAbstract_callback_Foo_swig_7fd9f15fca31a13f(go_val);
  
  c_result.assign(result.p, result.n);
  free(result.p);
  
  return c_result;
}

extern "C" _gostring_ Swig_DirectorFooBarAbstract_callback_Bar_swig_7fd9f15fca31a13f(int);
std::string SwigDirector_FooBarAbstract::Bar() {
  _gostring_ result;
  
  std::string c_result;
  result = Swig_DirectorFooBarAbstract_callback_Bar_swig_7fd9f15fca31a13f(go_val);
  
  c_result.assign(result.p, result.n);
  free(result.p);
  
  return c_result;
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_swig_7fd9f15fca31a13f(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_swig_7fd9f15fca31a13f(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


FooBarAbstract *_wrap__swig_NewDirectorFooBarAbstractFooBarAbstract_swig_7fd9f15fca31a13f(intgo _swig_go_0) {
  int arg1 ;
  FooBarAbstract *result = 0 ;
  FooBarAbstract *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_FooBarAbstract(arg1);
  *(FooBarAbstract **)&_swig_go_result = (FooBarAbstract *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorFooBarAbstract_swig_7fd9f15fca31a13f(FooBarAbstract *_swig_go_0) {
  FooBarAbstract *arg1 = (FooBarAbstract *) 0 ;
  
  arg1 = *(FooBarAbstract **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap__swig_DirectorFooBarAbstract_upcall_Foo_swig_7fd9f15fca31a13f(SwigDirector_FooBarAbstract *_swig_go_0) {
  SwigDirector_FooBarAbstract *arg1 = (SwigDirector_FooBarAbstract *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  SwigDirector_FooBarAbstract *darg = 0;
  
  arg1 = *(SwigDirector_FooBarAbstract **)&_swig_go_0; 
  
  darg = dynamic_cast<SwigDirector_FooBarAbstract *>(arg1);
  result = (std::string)arg1->_swig_upcall_Foo();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_FooBarAbstract_swig_7fd9f15fca31a13f(FooBarAbstract *_swig_go_0) {
  FooBarAbstract *arg1 = (FooBarAbstract *) 0 ;
  
  arg1 = *(FooBarAbstract **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_FooBarAbstract_FooBar_swig_7fd9f15fca31a13f(FooBarAbstract *_swig_go_0) {
  FooBarAbstract *arg1 = (FooBarAbstract *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(FooBarAbstract **)&_swig_go_0; 
  
  result = (arg1)->FooBar();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


FooBarCpp *_wrap_new_FooBarCpp_swig_7fd9f15fca31a13f() {
  FooBarCpp *result = 0 ;
  FooBarCpp *_swig_go_result;
  
  
  result = (FooBarCpp *)new FooBarCpp();
  *(FooBarCpp **)&_swig_go_result = (FooBarCpp *)result; 
  return _swig_go_result;
}


void _wrap_delete_FooBarCpp_swig_7fd9f15fca31a13f(FooBarCpp *_swig_go_0) {
  FooBarCpp *arg1 = (FooBarCpp *) 0 ;
  
  arg1 = *(FooBarCpp **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_FooBarCpp_FooBar_swig_7fd9f15fca31a13f(FooBarCpp *_swig_go_0) {
  FooBarCpp *arg1 = (FooBarCpp *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(FooBarCpp **)&_swig_go_0; 
  
  FooBarAbstract *swig_b0 = (FooBarAbstract *)arg1;
  result = (swig_b0)->FooBar();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

