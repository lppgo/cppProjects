/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./swig/example.i

package swig

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef _gostring_ swig_type_3;
extern void _wrap_Swig_free_swig_7fd9f15fca31a13f(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_swig_7fd9f15fca31a13f(swig_intgo arg1);
extern uintptr_t _wrap__swig_NewDirectorFooBarAbstractFooBarAbstract_swig_7fd9f15fca31a13f(int);
extern void _wrap_DeleteDirectorFooBarAbstract_swig_7fd9f15fca31a13f(uintptr_t arg1);
extern swig_type_1 _wrap__swig_DirectorFooBarAbstract_upcall_Foo_swig_7fd9f15fca31a13f(uintptr_t);
extern void _wrap_delete_FooBarAbstract_swig_7fd9f15fca31a13f(uintptr_t arg1);
extern swig_type_2 _wrap_FooBarAbstract_FooBar_swig_7fd9f15fca31a13f(uintptr_t arg1);
extern uintptr_t _wrap_new_FooBarCpp_swig_7fd9f15fca31a13f(void);
extern void _wrap_delete_FooBarCpp_swig_7fd9f15fca31a13f(uintptr_t arg1);
extern swig_type_3 _wrap_FooBarCpp_FooBar_swig_7fd9f15fca31a13f(uintptr_t _swig_base);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_swig_7fd9f15fca31a13f(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_swig_7fd9f15fca31a13f(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type _swig_DirectorFooBarAbstract struct {
	SwigcptrFooBarAbstract
	v interface{}
}

func (p *_swig_DirectorFooBarAbstract) Swigcptr() uintptr {
	return p.SwigcptrFooBarAbstract.Swigcptr()
}

func (p *_swig_DirectorFooBarAbstract) SwigIsFooBarAbstract() {
}

func (p *_swig_DirectorFooBarAbstract) DirectorInterface() interface{} {
	return p.v
}

func NewDirectorFooBarAbstract(v interface{}) FooBarAbstract {
	p := &_swig_DirectorFooBarAbstract{0, v}
	p.SwigcptrFooBarAbstract = SwigcptrFooBarAbstract(C._wrap__swig_NewDirectorFooBarAbstractFooBarAbstract_swig_7fd9f15fca31a13f(C.int(swigDirectorAdd(p))))
	return p
}

func DeleteDirectorFooBarAbstract(arg1 FooBarAbstract) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_DeleteDirectorFooBarAbstract_swig_7fd9f15fca31a13f(C.uintptr_t(_swig_i_0))
}

//export Swiggo_DeleteDirector_FooBarAbstract_swig_7fd9f15fca31a13f
func Swiggo_DeleteDirector_FooBarAbstract_swig_7fd9f15fca31a13f(c int) {
	swigDirectorLookup(c).(*_swig_DirectorFooBarAbstract).SwigcptrFooBarAbstract = 0
	swigDirectorDelete(c)
}

type _swig_DirectorInterfaceFooBarAbstractFoo interface {
	Foo() string
}

func (swig_p *_swig_DirectorFooBarAbstract) Foo() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceFooBarAbstractFoo); swig_ok {
		return swig_g.Foo()
	}
	var swig_r string
	swig_r_p := C._wrap__swig_DirectorFooBarAbstract_upcall_Foo_swig_7fd9f15fca31a13f(C.uintptr_t(swig_p.SwigcptrFooBarAbstract))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func DirectorFooBarAbstractFoo(p FooBarAbstract) string {
	var swig_r string
	swig_r_p := C._wrap__swig_DirectorFooBarAbstract_upcall_Foo_swig_7fd9f15fca31a13f(C.uintptr_t(p.(*_swig_DirectorFooBarAbstract).SwigcptrFooBarAbstract))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

//export Swig_DirectorFooBarAbstract_callback_Foo_swig_7fd9f15fca31a13f
func Swig_DirectorFooBarAbstract_callback_Foo_swig_7fd9f15fca31a13f(swig_c int) (swig_result string) {
	var swig_r string
	swig_p := swigDirectorLookup(swig_c).(*_swig_DirectorFooBarAbstract)
	swig_r = swig_p.Foo()
	var swig_r_1 string

  {
    p := Swig_malloc(len(swig_r))
    s := (*[1<<30]byte)(unsafe.Pointer(p))[:len(swig_r)]
    copy(s, swig_r)
    swig_r_1 = *(*string)(unsafe.Pointer(&s))
  }

	return swig_r_1
}

type _swig_DirectorInterfaceFooBarAbstractBar interface {
	Bar() string
}

func (swig_p *_swig_DirectorFooBarAbstract) Bar() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceFooBarAbstractBar); swig_ok {
		return swig_g.Bar()
	}
	panic("call to pure virtual method")
}

//export Swig_DirectorFooBarAbstract_callback_Bar_swig_7fd9f15fca31a13f
func Swig_DirectorFooBarAbstract_callback_Bar_swig_7fd9f15fca31a13f(swig_c int) (swig_result string) {
	var swig_r string
	swig_p := swigDirectorLookup(swig_c).(*_swig_DirectorFooBarAbstract)
	swig_r = swig_p.Bar()
	var swig_r_1 string

  {
    p := Swig_malloc(len(swig_r))
    s := (*[1<<30]byte)(unsafe.Pointer(p))[:len(swig_r)]
    copy(s, swig_r)
    swig_r_1 = *(*string)(unsafe.Pointer(&s))
  }

	return swig_r_1
}

type SwigcptrFooBarAbstract uintptr

func (p SwigcptrFooBarAbstract) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFooBarAbstract) SwigIsFooBarAbstract() {
}

func (p SwigcptrFooBarAbstract) DirectorInterface() interface{} {
	return nil
}

func DeleteFooBarAbstract(arg1 FooBarAbstract) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_FooBarAbstract_swig_7fd9f15fca31a13f(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrFooBarAbstract) FooBar() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_FooBarAbstract_FooBar_swig_7fd9f15fca31a13f(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

type FooBarAbstract interface {
	Swigcptr() uintptr
	SwigIsFooBarAbstract()
	DirectorInterface() interface{}
	FooBar() (_swig_ret string)
}

type SwigcptrFooBarCpp uintptr

func (p SwigcptrFooBarCpp) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFooBarCpp) SwigIsFooBarCpp() {
}

func NewFooBarCpp() (_swig_ret FooBarCpp) {
	var swig_r FooBarCpp
	swig_r = (FooBarCpp)(SwigcptrFooBarCpp(C._wrap_new_FooBarCpp_swig_7fd9f15fca31a13f()))
	return swig_r
}

func DeleteFooBarCpp(arg1 FooBarCpp) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_FooBarCpp_swig_7fd9f15fca31a13f(C.uintptr_t(_swig_i_0))
}

func (_swig_base SwigcptrFooBarCpp) FooBar() (_swig_ret string) {
	var swig_r string
	swig_r_p := C._wrap_FooBarCpp_FooBar_swig_7fd9f15fca31a13f(C.uintptr_t(_swig_base))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (p SwigcptrFooBarCpp) SwigIsFooBarAbstract() {
}

func (p SwigcptrFooBarCpp) SwigGetFooBarAbstract() FooBarAbstract {
	return SwigcptrFooBarAbstract(p.Swigcptr())
}

type FooBarCpp interface {
	Swigcptr() uintptr
	SwigIsFooBarCpp()
	FooBar() (_swig_ret string)
	SwigIsFooBarAbstract()
	SwigGetFooBarAbstract() FooBarAbstract
}


type SwigcptrSwigDirector_FooBarAbstract uintptr
type SwigDirector_FooBarAbstract interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_FooBarAbstract) Swigcptr() uintptr {
	return uintptr(p)
}



var swigDirectorTrack struct {
	sync.Mutex
	m map[int]interface{}
	c int
}

func swigDirectorAdd(v interface{}) int {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m == nil {
		swigDirectorTrack.m = make(map[int]interface{})
	}
	swigDirectorTrack.c++
	ret := swigDirectorTrack.c
	swigDirectorTrack.m[ret] = v
	return ret
}

func swigDirectorLookup(c int) interface{} {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	ret := swigDirectorTrack.m[c]
	if ret == nil {
		panic("C++ director pointer not found (possible	use-after-free)")
	}
	return ret
}

func swigDirectorDelete(c int) {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m[c] == nil {
		if c > swigDirectorTrack.c {
			panic("C++ director pointer invalid (possible memory corruption")
		} else {
			panic("C++ director pointer not found (possible use-after-free)")
		}
	}
	delete(swigDirectorTrack.m, c)
}


