/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./src/swig.i

package src

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
extern void _wrap_Swig_free_src_7647c2523c359ce5(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_src_7647c2523c359ce5(swig_intgo arg1);
extern uintptr_t _wrap__swig_NewDirectorBaseCaseBaseCase__SWIG_0_src_7647c2523c359ce5(int);
extern uintptr_t _wrap__swig_NewDirectorBaseCaseBaseCase__SWIG_1_src_7647c2523c359ce5(int, uintptr_t arg1);
extern void _wrap_DeleteDirectorBaseCase_src_7647c2523c359ce5(uintptr_t arg1);
extern void _wrap__swig_DirectorBaseCase_upcall_Run_src_7647c2523c359ce5(uintptr_t);
extern uintptr_t _wrap_new_BaseCase__SWIG_0_src_7647c2523c359ce5(void);
extern void _wrap_delete_BaseCase_src_7647c2523c359ce5(uintptr_t arg1);
extern uintptr_t _wrap_new_BaseCase__SWIG_1_src_7647c2523c359ce5(uintptr_t arg1);
extern void _wrap_BaseCase_Run_src_7647c2523c359ce5(uintptr_t arg1);
extern void _wrap_BaseCase_m_caseName_set_src_7647c2523c359ce5(uintptr_t arg1, swig_type_1 arg2);
extern swig_type_2 _wrap_BaseCase_m_caseName_get_src_7647c2523c359ce5(uintptr_t arg1);
extern void _wrap_CaseRunner__baseCase__set_src_7647c2523c359ce5(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_CaseRunner__baseCase__get_src_7647c2523c359ce5(uintptr_t arg1);
extern uintptr_t _wrap_new_CaseRunner_src_7647c2523c359ce5(void);
extern void _wrap_CaseRunner_RegisterCase_src_7647c2523c359ce5(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_CaseRunner_run_src_7647c2523c359ce5(uintptr_t arg1);
extern void _wrap_delete_CaseRunner_src_7647c2523c359ce5(uintptr_t arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_src_7647c2523c359ce5(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type _swig_DirectorBaseCase struct {
	SwigcptrBaseCase
	v interface{}
}

func (p *_swig_DirectorBaseCase) Swigcptr() uintptr {
	return p.SwigcptrBaseCase.Swigcptr()
}

func (p *_swig_DirectorBaseCase) SwigIsBaseCase() {
}

func (p *_swig_DirectorBaseCase) DirectorInterface() interface{} {
	return p.v
}

func NewDirectorBaseCase__SWIG_0(v interface{}) BaseCase {
	p := &_swig_DirectorBaseCase{0, v}
	p.SwigcptrBaseCase = SwigcptrBaseCase(C._wrap__swig_NewDirectorBaseCaseBaseCase__SWIG_0_src_7647c2523c359ce5(C.int(swigDirectorAdd(p))))
	return p
}

func NewDirectorBaseCase__SWIG_1(v interface{}, arg1 BaseCase) BaseCase {
	p := &_swig_DirectorBaseCase{0, v}
	_swig_i_0 := arg1.Swigcptr()
	p.SwigcptrBaseCase = SwigcptrBaseCase(C._wrap__swig_NewDirectorBaseCaseBaseCase__SWIG_1_src_7647c2523c359ce5(C.int(swigDirectorAdd(p)), C.uintptr_t(_swig_i_0)))
	return p
}

func NewDirectorBaseCase(abi interface{}, a ...interface{}) BaseCase {
	argc := len(a)
	if argc == 0 {
		return NewDirectorBaseCase__SWIG_0(abi)
	}
	if argc == 1 {
		return NewDirectorBaseCase__SWIG_1(abi, a[0].(BaseCase))
	}
	panic("No match for overloaded function call")
}

func DeleteDirectorBaseCase(arg1 BaseCase) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_DeleteDirectorBaseCase_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
}

//export Swiggo_DeleteDirector_BaseCase_src_7647c2523c359ce5
func Swiggo_DeleteDirector_BaseCase_src_7647c2523c359ce5(c int) {
	swigDirectorLookup(c).(*_swig_DirectorBaseCase).SwigcptrBaseCase = 0
	swigDirectorDelete(c)
}

type _swig_DirectorInterfaceBaseCaseRun interface {
	Run()
}

func (swig_p *_swig_DirectorBaseCase) Run() {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceBaseCaseRun); swig_ok {
		swig_g.Run()
		return
	}
	C._wrap__swig_DirectorBaseCase_upcall_Run_src_7647c2523c359ce5(C.uintptr_t(swig_p.SwigcptrBaseCase))
}

func DirectorBaseCaseRun(p BaseCase) {
	C._wrap__swig_DirectorBaseCase_upcall_Run_src_7647c2523c359ce5(C.uintptr_t(p.(*_swig_DirectorBaseCase).SwigcptrBaseCase))
}

//export Swig_DirectorBaseCase_callback_Run_src_7647c2523c359ce5
func Swig_DirectorBaseCase_callback_Run_src_7647c2523c359ce5(swig_c int) {
	swig_p := swigDirectorLookup(swig_c).(*_swig_DirectorBaseCase)
	swig_p.Run()
}

type SwigcptrBaseCase uintptr

func (p SwigcptrBaseCase) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBaseCase) SwigIsBaseCase() {
}

func (p SwigcptrBaseCase) DirectorInterface() interface{} {
	return nil
}

func NewBaseCase__SWIG_0() (_swig_ret BaseCase) {
	var swig_r BaseCase
	swig_r = (BaseCase)(SwigcptrBaseCase(C._wrap_new_BaseCase__SWIG_0_src_7647c2523c359ce5()))
	return swig_r
}

func DeleteBaseCase(arg1 BaseCase) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_BaseCase_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
}

func NewBaseCase__SWIG_1(arg1 BaseCase) (_swig_ret BaseCase) {
	var swig_r BaseCase
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (BaseCase)(SwigcptrBaseCase(C._wrap_new_BaseCase__SWIG_1_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewBaseCase(a ...interface{}) BaseCase {
	argc := len(a)
	if argc == 0 {
		return NewBaseCase__SWIG_0()
	}
	if argc == 1 {
		return NewBaseCase__SWIG_1(a[0].(BaseCase))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrBaseCase) Run() {
	_swig_i_0 := arg1
	C._wrap_BaseCase_Run_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrBaseCase) SetM_caseName(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_BaseCase_m_caseName_set_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrBaseCase) GetM_caseName() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_BaseCase_m_caseName_get_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

type BaseCase interface {
	Swigcptr() uintptr
	SwigIsBaseCase()
	DirectorInterface() interface{}
	Run()
	SetM_caseName(arg2 string)
	GetM_caseName() (_swig_ret string)
}

type SwigcptrCaseRunner uintptr

func (p SwigcptrCaseRunner) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrCaseRunner) SwigIsCaseRunner() {
}

func (arg1 SwigcptrCaseRunner) SetX_baseCase_(arg2 BaseCase) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_CaseRunner__baseCase__set_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrCaseRunner) GetX_baseCase_() (_swig_ret BaseCase) {
	var swig_r BaseCase
	_swig_i_0 := arg1
	swig_r = (BaseCase)(SwigcptrBaseCase(C._wrap_CaseRunner__baseCase__get_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewCaseRunner() (_swig_ret CaseRunner) {
	var swig_r CaseRunner
	swig_r = (CaseRunner)(SwigcptrCaseRunner(C._wrap_new_CaseRunner_src_7647c2523c359ce5()))
	return swig_r
}

func (arg1 SwigcptrCaseRunner) RegisterCase(arg2 BaseCase) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_CaseRunner_RegisterCase_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrCaseRunner) Run() {
	_swig_i_0 := arg1
	C._wrap_CaseRunner_run_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
}

func DeleteCaseRunner(arg1 CaseRunner) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_CaseRunner_src_7647c2523c359ce5(C.uintptr_t(_swig_i_0))
}

type CaseRunner interface {
	Swigcptr() uintptr
	SwigIsCaseRunner()
	SetX_baseCase_(arg2 BaseCase)
	GetX_baseCase_() (_swig_ret BaseCase)
	RegisterCase(arg2 BaseCase)
	Run()
}


type SwigcptrSwigDirector_BaseCase uintptr
type SwigDirector_BaseCase interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_BaseCase) Swigcptr() uintptr {
	return uintptr(p)
}



var swigDirectorTrack struct {
	sync.Mutex
	m map[int]interface{}
	c int
}

func swigDirectorAdd(v interface{}) int {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m == nil {
		swigDirectorTrack.m = make(map[int]interface{})
	}
	swigDirectorTrack.c++
	ret := swigDirectorTrack.c
	swigDirectorTrack.m[ret] = v
	return ret
}

func swigDirectorLookup(c int) interface{} {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	ret := swigDirectorTrack.m[c]
	if ret == nil {
		panic("C++ director pointer not found (possible	use-after-free)")
	}
	return ret
}

func swigDirectorDelete(c int) {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m[c] == nil {
		if c > swigDirectorTrack.c {
			panic("C++ director pointer invalid (possible memory corruption")
		} else {
			panic("C++ director pointer not found (possible use-after-free)")
		}
	}
	delete(swigDirectorTrack.m, c)
}


