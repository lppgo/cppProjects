// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AMAServerClient is the client API for AMAServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AMAServerClient interface {
	MDOrderBook(ctx context.Context, in *MDOrderBookRequest, opts ...grpc.CallOption) (*MDOrderBookResponse, error)
}

type aMAServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAMAServerClient(cc grpc.ClientConnInterface) AMAServerClient {
	return &aMAServerClient{cc}
}

func (c *aMAServerClient) MDOrderBook(ctx context.Context, in *MDOrderBookRequest, opts ...grpc.CallOption) (*MDOrderBookResponse, error) {
	out := new(MDOrderBookResponse)
	err := c.cc.Invoke(ctx, "/AMA.AMAServer/MDOrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AMAServerServer is the server API for AMAServer service.
// All implementations must embed UnimplementedAMAServerServer
// for forward compatibility
type AMAServerServer interface {
	MDOrderBook(context.Context, *MDOrderBookRequest) (*MDOrderBookResponse, error)
	mustEmbedUnimplementedAMAServerServer()
}

// UnimplementedAMAServerServer must be embedded to have forward compatible implementations.
type UnimplementedAMAServerServer struct {
}

func (UnimplementedAMAServerServer) MDOrderBook(context.Context, *MDOrderBookRequest) (*MDOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDOrderBook not implemented")
}
func (UnimplementedAMAServerServer) mustEmbedUnimplementedAMAServerServer() {}

// UnsafeAMAServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AMAServerServer will
// result in compilation errors.
type UnsafeAMAServerServer interface {
	mustEmbedUnimplementedAMAServerServer()
}

func RegisterAMAServerServer(s grpc.ServiceRegistrar, srv AMAServerServer) {
	s.RegisterService(&AMAServer_ServiceDesc, srv)
}

func _AMAServer_MDOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MDOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMAServerServer).MDOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AMA.AMAServer/MDOrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMAServerServer).MDOrderBook(ctx, req.(*MDOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AMAServer_ServiceDesc is the grpc.ServiceDesc for AMAServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AMAServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AMA.AMAServer",
	HandlerType: (*AMAServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MDOrderBook",
			Handler:    _AMAServer_MDOrderBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AMAServer.proto",
}
