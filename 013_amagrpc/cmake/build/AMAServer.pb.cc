// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AMAServer.proto

#include "AMAServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AMA {
constexpr MDOrderBookRequest::MDOrderBookRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : req_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MDOrderBookRequestDefaultTypeInternal {
  constexpr MDOrderBookRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MDOrderBookRequestDefaultTypeInternal() {}
  union {
    MDOrderBookRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MDOrderBookRequestDefaultTypeInternal _MDOrderBookRequest_default_instance_;
constexpr MDOrderBookResponse::MDOrderBookResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_book_vector_(){}
struct MDOrderBookResponseDefaultTypeInternal {
  constexpr MDOrderBookResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MDOrderBookResponseDefaultTypeInternal() {}
  union {
    MDOrderBookResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MDOrderBookResponseDefaultTypeInternal _MDOrderBookResponse_default_instance_;
constexpr MDOrderBook::MDOrderBook(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bid_order_book_()
  , offer_order_book_()
  , security_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_no_(0)
  , market_type_(0)
  , last_tick_time_(int64_t{0})
  , last_snapshot_time_(int64_t{0})
  , last_tick_seq_(int64_t{0}){}
struct MDOrderBookDefaultTypeInternal {
  constexpr MDOrderBookDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MDOrderBookDefaultTypeInternal() {}
  union {
    MDOrderBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MDOrderBookDefaultTypeInternal _MDOrderBook_default_instance_;
constexpr MDOrderBookItem::MDOrderBookItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_queue_()
  , _order_queue_cached_byte_size_(0)
  , price_(int64_t{0})
  , volume_(int64_t{0}){}
struct MDOrderBookItemDefaultTypeInternal {
  constexpr MDOrderBookItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MDOrderBookItemDefaultTypeInternal() {}
  union {
    MDOrderBookItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MDOrderBookItemDefaultTypeInternal _MDOrderBookItem_default_instance_;
}  // namespace AMA
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AMAServer_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AMAServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AMAServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AMAServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookRequest, req_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookResponse, order_book_vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, channel_no_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, market_type_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, security_code_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, last_tick_time_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, last_snapshot_time_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, last_tick_seq_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, bid_order_book_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBook, offer_order_book_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookItem, price_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookItem, volume_),
  PROTOBUF_FIELD_OFFSET(::AMA::MDOrderBookItem, order_queue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AMA::MDOrderBookRequest)},
  { 6, -1, sizeof(::AMA::MDOrderBookResponse)},
  { 12, -1, sizeof(::AMA::MDOrderBook)},
  { 25, -1, sizeof(::AMA::MDOrderBookItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AMA::_MDOrderBookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AMA::_MDOrderBookResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AMA::_MDOrderBook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AMA::_MDOrderBookItem_default_instance_),
};

const char descriptor_table_protodef_AMAServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017AMAServer.proto\022\003AMA\"&\n\022MDOrderBookReq"
  "uest\022\020\n\010req_time\030\001 \001(\t\"B\n\023MDOrderBookRes"
  "ponse\022+\n\021order_book_vector\030\001 \003(\0132\020.AMA.M"
  "DOrderBook\"\366\001\n\013MDOrderBook\022\022\n\nchannel_no"
  "\030\001 \001(\005\022\023\n\013market_type\030\002 \001(\005\022\025\n\rsecurity_"
  "code\030\003 \001(\t\022\026\n\016last_tick_time\030\004 \001(\003\022\032\n\022la"
  "st_snapshot_time\030\005 \001(\003\022\025\n\rlast_tick_seq\030"
  "\006 \001(\003\022,\n\016bid_order_book\030\007 \003(\0132\024.AMA.MDOr"
  "derBookItem\022.\n\020offer_order_book\030\010 \003(\0132\024."
  "AMA.MDOrderBookItem\"E\n\017MDOrderBookItem\022\r"
  "\n\005price\030\001 \001(\003\022\016\n\006volume\030\002 \001(\003\022\023\n\013order_q"
  "ueue\030\004 \003(\0032O\n\tAMAServer\022B\n\013MDOrderBook\022\027"
  ".AMA.MDOrderBookRequest\032\030.AMA.MDOrderBoo"
  "kResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AMAServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AMAServer_2eproto = {
  false, false, 539, descriptor_table_protodef_AMAServer_2eproto, "AMAServer.proto", 
  &descriptor_table_AMAServer_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_AMAServer_2eproto::offsets,
  file_level_metadata_AMAServer_2eproto, file_level_enum_descriptors_AMAServer_2eproto, file_level_service_descriptors_AMAServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AMAServer_2eproto_getter() {
  return &descriptor_table_AMAServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AMAServer_2eproto(&descriptor_table_AMAServer_2eproto);
namespace AMA {

// ===================================================================

class MDOrderBookRequest::_Internal {
 public:
};

MDOrderBookRequest::MDOrderBookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AMA.MDOrderBookRequest)
}
MDOrderBookRequest::MDOrderBookRequest(const MDOrderBookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_req_time().empty()) {
    req_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_req_time(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AMA.MDOrderBookRequest)
}

inline void MDOrderBookRequest::SharedCtor() {
req_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MDOrderBookRequest::~MDOrderBookRequest() {
  // @@protoc_insertion_point(destructor:AMA.MDOrderBookRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MDOrderBookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  req_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDOrderBookRequest::ArenaDtor(void* object) {
  MDOrderBookRequest* _this = reinterpret_cast< MDOrderBookRequest* >(object);
  (void)_this;
}
void MDOrderBookRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MDOrderBookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MDOrderBookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AMA.MDOrderBookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_time_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDOrderBookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string req_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_req_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AMA.MDOrderBookRequest.req_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MDOrderBookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AMA.MDOrderBookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string req_time = 1;
  if (!this->_internal_req_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_req_time().data(), static_cast<int>(this->_internal_req_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AMA.MDOrderBookRequest.req_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_req_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AMA.MDOrderBookRequest)
  return target;
}

size_t MDOrderBookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AMA.MDOrderBookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string req_time = 1;
  if (!this->_internal_req_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_req_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDOrderBookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MDOrderBookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDOrderBookRequest::GetClassData() const { return &_class_data_; }

void MDOrderBookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MDOrderBookRequest *>(to)->MergeFrom(
      static_cast<const MDOrderBookRequest &>(from));
}


void MDOrderBookRequest::MergeFrom(const MDOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AMA.MDOrderBookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_req_time().empty()) {
    _internal_set_req_time(from._internal_req_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDOrderBookRequest::CopyFrom(const MDOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AMA.MDOrderBookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDOrderBookRequest::IsInitialized() const {
  return true;
}

void MDOrderBookRequest::InternalSwap(MDOrderBookRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &req_time_, GetArenaForAllocation(),
      &other->req_time_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MDOrderBookRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AMAServer_2eproto_getter, &descriptor_table_AMAServer_2eproto_once,
      file_level_metadata_AMAServer_2eproto[0]);
}

// ===================================================================

class MDOrderBookResponse::_Internal {
 public:
};

MDOrderBookResponse::MDOrderBookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  order_book_vector_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AMA.MDOrderBookResponse)
}
MDOrderBookResponse::MDOrderBookResponse(const MDOrderBookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      order_book_vector_(from.order_book_vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AMA.MDOrderBookResponse)
}

inline void MDOrderBookResponse::SharedCtor() {
}

MDOrderBookResponse::~MDOrderBookResponse() {
  // @@protoc_insertion_point(destructor:AMA.MDOrderBookResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MDOrderBookResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MDOrderBookResponse::ArenaDtor(void* object) {
  MDOrderBookResponse* _this = reinterpret_cast< MDOrderBookResponse* >(object);
  (void)_this;
}
void MDOrderBookResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MDOrderBookResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MDOrderBookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AMA.MDOrderBookResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_book_vector_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDOrderBookResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AMA.MDOrderBook order_book_vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_book_vector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MDOrderBookResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AMA.MDOrderBookResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AMA.MDOrderBook order_book_vector = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_book_vector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_order_book_vector(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AMA.MDOrderBookResponse)
  return target;
}

size_t MDOrderBookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AMA.MDOrderBookResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AMA.MDOrderBook order_book_vector = 1;
  total_size += 1UL * this->_internal_order_book_vector_size();
  for (const auto& msg : this->order_book_vector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDOrderBookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MDOrderBookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDOrderBookResponse::GetClassData() const { return &_class_data_; }

void MDOrderBookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MDOrderBookResponse *>(to)->MergeFrom(
      static_cast<const MDOrderBookResponse &>(from));
}


void MDOrderBookResponse::MergeFrom(const MDOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AMA.MDOrderBookResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_book_vector_.MergeFrom(from.order_book_vector_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDOrderBookResponse::CopyFrom(const MDOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AMA.MDOrderBookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDOrderBookResponse::IsInitialized() const {
  return true;
}

void MDOrderBookResponse::InternalSwap(MDOrderBookResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  order_book_vector_.InternalSwap(&other->order_book_vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDOrderBookResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AMAServer_2eproto_getter, &descriptor_table_AMAServer_2eproto_once,
      file_level_metadata_AMAServer_2eproto[1]);
}

// ===================================================================

class MDOrderBook::_Internal {
 public:
};

MDOrderBook::MDOrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bid_order_book_(arena),
  offer_order_book_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AMA.MDOrderBook)
}
MDOrderBook::MDOrderBook(const MDOrderBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bid_order_book_(from.bid_order_book_),
      offer_order_book_(from.offer_order_book_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  security_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_code().empty()) {
    security_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_security_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&channel_no_, &from.channel_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_tick_seq_) -
    reinterpret_cast<char*>(&channel_no_)) + sizeof(last_tick_seq_));
  // @@protoc_insertion_point(copy_constructor:AMA.MDOrderBook)
}

inline void MDOrderBook::SharedCtor() {
security_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_tick_seq_) -
    reinterpret_cast<char*>(&channel_no_)) + sizeof(last_tick_seq_));
}

MDOrderBook::~MDOrderBook() {
  // @@protoc_insertion_point(destructor:AMA.MDOrderBook)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MDOrderBook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  security_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDOrderBook::ArenaDtor(void* object) {
  MDOrderBook* _this = reinterpret_cast< MDOrderBook* >(object);
  (void)_this;
}
void MDOrderBook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MDOrderBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MDOrderBook::Clear() {
// @@protoc_insertion_point(message_clear_start:AMA.MDOrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bid_order_book_.Clear();
  offer_order_book_.Clear();
  security_code_.ClearToEmpty();
  ::memset(&channel_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_tick_seq_) -
      reinterpret_cast<char*>(&channel_no_)) + sizeof(last_tick_seq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDOrderBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 market_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          market_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string security_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_security_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AMA.MDOrderBook.security_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_tick_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_tick_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_snapshot_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_snapshot_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_tick_seq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          last_tick_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AMA.MDOrderBookItem bid_order_book = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bid_order_book(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .AMA.MDOrderBookItem offer_order_book = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offer_order_book(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MDOrderBook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AMA.MDOrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_no = 1;
  if (this->_internal_channel_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel_no(), target);
  }

  // int32 market_type = 2;
  if (this->_internal_market_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_market_type(), target);
  }

  // string security_code = 3;
  if (!this->_internal_security_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_code().data(), static_cast<int>(this->_internal_security_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AMA.MDOrderBook.security_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_security_code(), target);
  }

  // int64 last_tick_time = 4;
  if (this->_internal_last_tick_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_tick_time(), target);
  }

  // int64 last_snapshot_time = 5;
  if (this->_internal_last_snapshot_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_snapshot_time(), target);
  }

  // int64 last_tick_seq = 6;
  if (this->_internal_last_tick_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_tick_seq(), target);
  }

  // repeated .AMA.MDOrderBookItem bid_order_book = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bid_order_book_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_bid_order_book(i), target, stream);
  }

  // repeated .AMA.MDOrderBookItem offer_order_book = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_offer_order_book_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_offer_order_book(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AMA.MDOrderBook)
  return target;
}

size_t MDOrderBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AMA.MDOrderBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AMA.MDOrderBookItem bid_order_book = 7;
  total_size += 1UL * this->_internal_bid_order_book_size();
  for (const auto& msg : this->bid_order_book_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AMA.MDOrderBookItem offer_order_book = 8;
  total_size += 1UL * this->_internal_offer_order_book_size();
  for (const auto& msg : this->offer_order_book_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string security_code = 3;
  if (!this->_internal_security_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_code());
  }

  // int32 channel_no = 1;
  if (this->_internal_channel_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_no());
  }

  // int32 market_type = 2;
  if (this->_internal_market_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_market_type());
  }

  // int64 last_tick_time = 4;
  if (this->_internal_last_tick_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_tick_time());
  }

  // int64 last_snapshot_time = 5;
  if (this->_internal_last_snapshot_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_snapshot_time());
  }

  // int64 last_tick_seq = 6;
  if (this->_internal_last_tick_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_tick_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDOrderBook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MDOrderBook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDOrderBook::GetClassData() const { return &_class_data_; }

void MDOrderBook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MDOrderBook *>(to)->MergeFrom(
      static_cast<const MDOrderBook &>(from));
}


void MDOrderBook::MergeFrom(const MDOrderBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AMA.MDOrderBook)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bid_order_book_.MergeFrom(from.bid_order_book_);
  offer_order_book_.MergeFrom(from.offer_order_book_);
  if (!from._internal_security_code().empty()) {
    _internal_set_security_code(from._internal_security_code());
  }
  if (from._internal_channel_no() != 0) {
    _internal_set_channel_no(from._internal_channel_no());
  }
  if (from._internal_market_type() != 0) {
    _internal_set_market_type(from._internal_market_type());
  }
  if (from._internal_last_tick_time() != 0) {
    _internal_set_last_tick_time(from._internal_last_tick_time());
  }
  if (from._internal_last_snapshot_time() != 0) {
    _internal_set_last_snapshot_time(from._internal_last_snapshot_time());
  }
  if (from._internal_last_tick_seq() != 0) {
    _internal_set_last_tick_seq(from._internal_last_tick_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDOrderBook::CopyFrom(const MDOrderBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AMA.MDOrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDOrderBook::IsInitialized() const {
  return true;
}

void MDOrderBook::InternalSwap(MDOrderBook* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bid_order_book_.InternalSwap(&other->bid_order_book_);
  offer_order_book_.InternalSwap(&other->offer_order_book_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &security_code_, GetArenaForAllocation(),
      &other->security_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDOrderBook, last_tick_seq_)
      + sizeof(MDOrderBook::last_tick_seq_)
      - PROTOBUF_FIELD_OFFSET(MDOrderBook, channel_no_)>(
          reinterpret_cast<char*>(&channel_no_),
          reinterpret_cast<char*>(&other->channel_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDOrderBook::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AMAServer_2eproto_getter, &descriptor_table_AMAServer_2eproto_once,
      file_level_metadata_AMAServer_2eproto[2]);
}

// ===================================================================

class MDOrderBookItem::_Internal {
 public:
};

MDOrderBookItem::MDOrderBookItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  order_queue_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AMA.MDOrderBookItem)
}
MDOrderBookItem::MDOrderBookItem(const MDOrderBookItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      order_queue_(from.order_queue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:AMA.MDOrderBookItem)
}

inline void MDOrderBookItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

MDOrderBookItem::~MDOrderBookItem() {
  // @@protoc_insertion_point(destructor:AMA.MDOrderBookItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MDOrderBookItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MDOrderBookItem::ArenaDtor(void* object) {
  MDOrderBookItem* _this = reinterpret_cast< MDOrderBookItem* >(object);
  (void)_this;
}
void MDOrderBookItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MDOrderBookItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MDOrderBookItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AMA.MDOrderBookItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_queue_.Clear();
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDOrderBookItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 order_queue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_order_queue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_order_queue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MDOrderBookItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AMA.MDOrderBookItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 price = 1;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_price(), target);
  }

  // int64 volume = 2;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_volume(), target);
  }

  // repeated int64 order_queue = 4;
  {
    int byte_size = _order_queue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_order_queue(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AMA.MDOrderBookItem)
  return target;
}

size_t MDOrderBookItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AMA.MDOrderBookItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 order_queue = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->order_queue_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _order_queue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 price = 1;
  if (this->_internal_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_price());
  }

  // int64 volume = 2;
  if (this->_internal_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDOrderBookItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MDOrderBookItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDOrderBookItem::GetClassData() const { return &_class_data_; }

void MDOrderBookItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MDOrderBookItem *>(to)->MergeFrom(
      static_cast<const MDOrderBookItem &>(from));
}


void MDOrderBookItem::MergeFrom(const MDOrderBookItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AMA.MDOrderBookItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_queue_.MergeFrom(from.order_queue_);
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDOrderBookItem::CopyFrom(const MDOrderBookItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AMA.MDOrderBookItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDOrderBookItem::IsInitialized() const {
  return true;
}

void MDOrderBookItem::InternalSwap(MDOrderBookItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  order_queue_.InternalSwap(&other->order_queue_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDOrderBookItem, volume_)
      + sizeof(MDOrderBookItem::volume_)
      - PROTOBUF_FIELD_OFFSET(MDOrderBookItem, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDOrderBookItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AMAServer_2eproto_getter, &descriptor_table_AMAServer_2eproto_once,
      file_level_metadata_AMAServer_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AMA
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AMA::MDOrderBookRequest* Arena::CreateMaybeMessage< ::AMA::MDOrderBookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AMA::MDOrderBookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AMA::MDOrderBookResponse* Arena::CreateMaybeMessage< ::AMA::MDOrderBookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AMA::MDOrderBookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AMA::MDOrderBook* Arena::CreateMaybeMessage< ::AMA::MDOrderBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AMA::MDOrderBook >(arena);
}
template<> PROTOBUF_NOINLINE ::AMA::MDOrderBookItem* Arena::CreateMaybeMessage< ::AMA::MDOrderBookItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AMA::MDOrderBookItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
