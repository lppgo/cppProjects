// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AMAServer.proto

#include "AMAServer.pb.h"
#include "AMAServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace AMA {

static const char* AMAServer_method_names[] = {
  "/AMA.AMAServer/MDOrderBook",
};

std::unique_ptr< AMAServer::Stub> AMAServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AMAServer::Stub> stub(new AMAServer::Stub(channel, options));
  return stub;
}

AMAServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MDOrderBook_(AMAServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AMAServer::Stub::MDOrderBook(::grpc::ClientContext* context, const ::AMA::MDOrderBookRequest& request, ::AMA::MDOrderBookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AMA::MDOrderBookRequest, ::AMA::MDOrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MDOrderBook_, context, request, response);
}

void AMAServer::Stub::async::MDOrderBook(::grpc::ClientContext* context, const ::AMA::MDOrderBookRequest* request, ::AMA::MDOrderBookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AMA::MDOrderBookRequest, ::AMA::MDOrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MDOrderBook_, context, request, response, std::move(f));
}

void AMAServer::Stub::async::MDOrderBook(::grpc::ClientContext* context, const ::AMA::MDOrderBookRequest* request, ::AMA::MDOrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MDOrderBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AMA::MDOrderBookResponse>* AMAServer::Stub::PrepareAsyncMDOrderBookRaw(::grpc::ClientContext* context, const ::AMA::MDOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AMA::MDOrderBookResponse, ::AMA::MDOrderBookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MDOrderBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AMA::MDOrderBookResponse>* AMAServer::Stub::AsyncMDOrderBookRaw(::grpc::ClientContext* context, const ::AMA::MDOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMDOrderBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

AMAServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AMAServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AMAServer::Service, ::AMA::MDOrderBookRequest, ::AMA::MDOrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AMAServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AMA::MDOrderBookRequest* req,
             ::AMA::MDOrderBookResponse* resp) {
               return service->MDOrderBook(ctx, req, resp);
             }, this)));
}

AMAServer::Service::~Service() {
}

::grpc::Status AMAServer::Service::MDOrderBook(::grpc::ServerContext* context, const ::AMA::MDOrderBookRequest* request, ::AMA::MDOrderBookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AMA

