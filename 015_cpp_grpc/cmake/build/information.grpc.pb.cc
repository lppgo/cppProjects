// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: information.proto

#include "information.pb.h"
#include "information.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace info {

static const char* Manager_method_names[] = {
  "/info.Manager/AddRecord",
  "/info.Manager/DeleteRecords",
  "/info.Manager/GetRecordsByAge",
  "/info.Manager/GetRecordsByNames",
};

std::unique_ptr< Manager::Stub> Manager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Manager::Stub> stub(new Manager::Stub(channel));
  return stub;
}

Manager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddRecord_(Manager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRecords_(Manager_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetRecordsByAge_(Manager_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetRecordsByNames_(Manager_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Manager::Stub::AddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddRecord_, context, request, response);
}

void Manager::Stub::experimental_async::AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRecord_, context, request, response, std::move(f));
}

void Manager::Stub::experimental_async::AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRecord_, context, request, response, std::move(f));
}

void Manager::Stub::experimental_async::AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRecord_, context, request, response, reactor);
}

void Manager::Stub::experimental_async::AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Manager::Stub::AsyncAddRecordRaw(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Manager::Stub::PrepareAsyncAddRecordRaw(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddRecord_, context, request, false);
}

::grpc::ClientWriter< ::info::ReqName>* Manager::Stub::DeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::info::ReqName>::Create(channel_.get(), rpcmethod_DeleteRecords_, context, response);
}

void Manager::Stub::experimental_async::DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::experimental::ClientWriteReactor< ::info::ReqName>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::info::ReqName>::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRecords_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::info::ReqName>* Manager::Stub::AsyncDeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::info::ReqName>::Create(channel_.get(), cq, rpcmethod_DeleteRecords_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::info::ReqName>* Manager::Stub::PrepareAsyncDeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::info::ReqName>::Create(channel_.get(), cq, rpcmethod_DeleteRecords_, context, response, false, nullptr);
}

::grpc::ClientReader< ::info::Person>* Manager::Stub::GetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::info::Person>::Create(channel_.get(), rpcmethod_GetRecordsByAge_, context, request);
}

void Manager::Stub::experimental_async::GetRecordsByAge(::grpc::ClientContext* context, ::info::AgeRange* request, ::grpc::experimental::ClientReadReactor< ::info::Person>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::info::Person>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecordsByAge_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::info::Person>* Manager::Stub::AsyncGetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::info::Person>::Create(channel_.get(), cq, rpcmethod_GetRecordsByAge_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::info::Person>* Manager::Stub::PrepareAsyncGetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::info::Person>::Create(channel_.get(), cq, rpcmethod_GetRecordsByAge_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::info::ReqName, ::info::Person>* Manager::Stub::GetRecordsByNamesRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::info::ReqName, ::info::Person>::Create(channel_.get(), rpcmethod_GetRecordsByNames_, context);
}

void Manager::Stub::experimental_async::GetRecordsByNames(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::info::ReqName,::info::Person>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::info::ReqName,::info::Person>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecordsByNames_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>* Manager::Stub::AsyncGetRecordsByNamesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::info::ReqName, ::info::Person>::Create(channel_.get(), cq, rpcmethod_GetRecordsByNames_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>* Manager::Stub::PrepareAsyncGetRecordsByNamesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::info::ReqName, ::info::Person>::Create(channel_.get(), cq, rpcmethod_GetRecordsByNames_, context, false, nullptr);
}

Manager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Manager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Manager::Service, ::info::Person, ::google::protobuf::Empty>(
          std::mem_fn(&Manager::Service::AddRecord), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Manager_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Manager::Service, ::info::ReqName, ::google::protobuf::Empty>(
          std::mem_fn(&Manager::Service::DeleteRecords), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Manager_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Manager::Service, ::info::AgeRange, ::info::Person>(
          std::mem_fn(&Manager::Service::GetRecordsByAge), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Manager_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Manager::Service, ::info::ReqName, ::info::Person>(
          std::mem_fn(&Manager::Service::GetRecordsByNames), this)));
}

Manager::Service::~Service() {
}

::grpc::Status Manager::Service::AddRecord(::grpc::ServerContext* context, const ::info::Person* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Manager::Service::DeleteRecords(::grpc::ServerContext* context, ::grpc::ServerReader< ::info::ReqName>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Manager::Service::GetRecordsByAge(::grpc::ServerContext* context, const ::info::AgeRange* request, ::grpc::ServerWriter< ::info::Person>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Manager::Service::GetRecordsByNames(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace info

