// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: information.proto
#ifndef GRPC_information_2eproto__INCLUDED
#define GRPC_information_2eproto__INCLUDED

#include "information.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace info {

class Manager final {
 public:
  static constexpr char const* service_full_name() {
    return "info.Manager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // unary rpc
    virtual ::grpc::Status AddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddRecordRaw(context, request, cq));
    }
    // stream grpc
    std::unique_ptr< ::grpc::ClientWriterInterface< ::info::ReqName>> DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::info::ReqName>>(DeleteRecordsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::info::ReqName>> AsyncDeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::info::ReqName>>(AsyncDeleteRecordsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::info::ReqName>> PrepareAsyncDeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::info::ReqName>>(PrepareAsyncDeleteRecordsRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::info::Person>> GetRecordsByAge(::grpc::ClientContext* context, const ::info::AgeRange& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::info::Person>>(GetRecordsByAgeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::info::Person>> AsyncGetRecordsByAge(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::info::Person>>(AsyncGetRecordsByAgeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::info::Person>> PrepareAsyncGetRecordsByAge(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::info::Person>>(PrepareAsyncGetRecordsByAgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::info::ReqName, ::info::Person>> GetRecordsByNames(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::info::ReqName, ::info::Person>>(GetRecordsByNamesRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::info::ReqName, ::info::Person>> AsyncGetRecordsByNames(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::info::ReqName, ::info::Person>>(AsyncGetRecordsByNamesRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::info::ReqName, ::info::Person>> PrepareAsyncGetRecordsByNames(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::info::ReqName, ::info::Person>>(PrepareAsyncGetRecordsByNamesRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // unary rpc
      virtual void AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // stream grpc
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::info::ReqName>* reactor) = 0;
      #else
      virtual void DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::experimental::ClientWriteReactor< ::info::ReqName>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRecordsByAge(::grpc::ClientContext* context, ::info::AgeRange* request, ::grpc::ClientReadReactor< ::info::Person>* reactor) = 0;
      #else
      virtual void GetRecordsByAge(::grpc::ClientContext* context, ::info::AgeRange* request, ::grpc::experimental::ClientReadReactor< ::info::Person>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRecordsByNames(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::info::ReqName,::info::Person>* reactor) = 0;
      #else
      virtual void GetRecordsByNames(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::info::ReqName,::info::Person>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddRecordRaw(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddRecordRaw(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::info::ReqName>* DeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::info::ReqName>* AsyncDeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::info::ReqName>* PrepareAsyncDeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::info::Person>* GetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::info::Person>* AsyncGetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::info::Person>* PrepareAsyncGetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::info::ReqName, ::info::Person>* GetRecordsByNamesRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::info::ReqName, ::info::Person>* AsyncGetRecordsByNamesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::info::ReqName, ::info::Person>* PrepareAsyncGetRecordsByNamesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddRecord(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::info::ReqName>> DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::info::ReqName>>(DeleteRecordsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::info::ReqName>> AsyncDeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::info::ReqName>>(AsyncDeleteRecordsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::info::ReqName>> PrepareAsyncDeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::info::ReqName>>(PrepareAsyncDeleteRecordsRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::info::Person>> GetRecordsByAge(::grpc::ClientContext* context, const ::info::AgeRange& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::info::Person>>(GetRecordsByAgeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::info::Person>> AsyncGetRecordsByAge(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::info::Person>>(AsyncGetRecordsByAgeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::info::Person>> PrepareAsyncGetRecordsByAge(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::info::Person>>(PrepareAsyncGetRecordsByAgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::info::ReqName, ::info::Person>> GetRecordsByNames(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::info::ReqName, ::info::Person>>(GetRecordsByNamesRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>> AsyncGetRecordsByNames(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>>(AsyncGetRecordsByNamesRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>> PrepareAsyncGetRecordsByNames(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>>(PrepareAsyncGetRecordsByNamesRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRecord(::grpc::ClientContext* context, const ::info::Person* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::info::ReqName>* reactor) override;
      #else
      void DeleteRecords(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::experimental::ClientWriteReactor< ::info::ReqName>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRecordsByAge(::grpc::ClientContext* context, ::info::AgeRange* request, ::grpc::ClientReadReactor< ::info::Person>* reactor) override;
      #else
      void GetRecordsByAge(::grpc::ClientContext* context, ::info::AgeRange* request, ::grpc::experimental::ClientReadReactor< ::info::Person>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRecordsByNames(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::info::ReqName,::info::Person>* reactor) override;
      #else
      void GetRecordsByNames(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::info::ReqName,::info::Person>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddRecordRaw(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddRecordRaw(::grpc::ClientContext* context, const ::info::Person& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::info::ReqName>* DeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::info::ReqName>* AsyncDeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::info::ReqName>* PrepareAsyncDeleteRecordsRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::info::Person>* GetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request) override;
    ::grpc::ClientAsyncReader< ::info::Person>* AsyncGetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::info::Person>* PrepareAsyncGetRecordsByAgeRaw(::grpc::ClientContext* context, const ::info::AgeRange& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::info::ReqName, ::info::Person>* GetRecordsByNamesRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>* AsyncGetRecordsByNamesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::info::ReqName, ::info::Person>* PrepareAsyncGetRecordsByNamesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecordsByAge_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecordsByNames_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // unary rpc
    virtual ::grpc::Status AddRecord(::grpc::ServerContext* context, const ::info::Person* request, ::google::protobuf::Empty* response);
    // stream grpc
    virtual ::grpc::Status DeleteRecords(::grpc::ServerContext* context, ::grpc::ServerReader< ::info::ReqName>* reader, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetRecordsByAge(::grpc::ServerContext* context, const ::info::AgeRange* request, ::grpc::ServerWriter< ::info::Person>* writer);
    virtual ::grpc::Status GetRecordsByNames(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRecord() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRecord(::grpc::ServerContext* context, ::info::Person* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRecords() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::info::ReqName>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecords(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::Empty, ::info::ReqName>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecordsByAge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecordsByAge() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRecordsByAge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByAge(::grpc::ServerContext* /*context*/, const ::info::AgeRange* /*request*/, ::grpc::ServerWriter< ::info::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordsByAge(::grpc::ServerContext* context, ::info::AgeRange* request, ::grpc::ServerAsyncWriter< ::info::Person>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecordsByNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecordsByNames() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetRecordsByNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByNames(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordsByNames(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::info::Person, ::info::ReqName>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddRecord<WithAsyncMethod_DeleteRecords<WithAsyncMethod_GetRecordsByAge<WithAsyncMethod_GetRecordsByNames<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddRecord() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::info::Person, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::info::Person* request, ::google::protobuf::Empty* response) { return this->AddRecord(context, request, response); }));}
    void SetMessageAllocatorFor_AddRecord(
        ::grpc::experimental::MessageAllocator< ::info::Person, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::info::Person, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRecord(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRecords() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::info::ReqName, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::google::protobuf::Empty* response) { return this->DeleteRecords(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_DeleteRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::info::ReqName>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::info::ReqName>* DeleteRecords(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::info::ReqName>* DeleteRecords(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRecordsByAge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRecordsByAge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::info::AgeRange, ::info::Person>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::info::AgeRange* request) { return this->GetRecordsByAge(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetRecordsByAge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByAge(::grpc::ServerContext* /*context*/, const ::info::AgeRange* /*request*/, ::grpc::ServerWriter< ::info::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::info::Person>* GetRecordsByAge(
      ::grpc::CallbackServerContext* /*context*/, const ::info::AgeRange* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::info::Person>* GetRecordsByAge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::info::AgeRange* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRecordsByNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRecordsByNames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::info::ReqName, ::info::Person>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetRecordsByNames(context); }));
    }
    ~ExperimentalWithCallbackMethod_GetRecordsByNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByNames(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::info::ReqName, ::info::Person>* GetRecordsByNames(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::info::ReqName, ::info::Person>* GetRecordsByNames(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AddRecord<ExperimentalWithCallbackMethod_DeleteRecords<ExperimentalWithCallbackMethod_GetRecordsByAge<ExperimentalWithCallbackMethod_GetRecordsByNames<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AddRecord<ExperimentalWithCallbackMethod_DeleteRecords<ExperimentalWithCallbackMethod_GetRecordsByAge<ExperimentalWithCallbackMethod_GetRecordsByNames<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRecord() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRecords() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::info::ReqName>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecordsByAge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecordsByAge() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRecordsByAge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByAge(::grpc::ServerContext* /*context*/, const ::info::AgeRange* /*request*/, ::grpc::ServerWriter< ::info::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecordsByNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecordsByNames() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetRecordsByNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByNames(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRecord() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRecords() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::info::ReqName>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecords(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecordsByAge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecordsByAge() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRecordsByAge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByAge(::grpc::ServerContext* /*context*/, const ::info::AgeRange* /*request*/, ::grpc::ServerWriter< ::info::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordsByAge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecordsByNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecordsByNames() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetRecordsByNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByNames(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordsByNames(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddRecord() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRecord(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRecord(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRecords() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->DeleteRecords(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::info::ReqName>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DeleteRecords(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* DeleteRecords(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRecordsByAge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRecordsByAge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetRecordsByAge(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRecordsByAge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByAge(::grpc::ServerContext* /*context*/, const ::info::AgeRange* /*request*/, ::grpc::ServerWriter< ::info::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRecordsByAge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetRecordsByAge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRecordsByNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRecordsByNames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetRecordsByNames(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRecordsByNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordsByNames(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::info::Person, ::info::ReqName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetRecordsByNames(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetRecordsByNames(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRecord() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::info::Person, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_AddRecord<BaseClass>::StreamedAddRecord, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRecord(::grpc::ServerContext* /*context*/, const ::info::Person* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::info::Person,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddRecord<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRecordsByAge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRecordsByAge() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::info::AgeRange, ::info::Person>(std::bind(&WithSplitStreamingMethod_GetRecordsByAge<BaseClass>::StreamedGetRecordsByAge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetRecordsByAge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecordsByAge(::grpc::ServerContext* /*context*/, const ::info::AgeRange* /*request*/, ::grpc::ServerWriter< ::info::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRecordsByAge(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::info::AgeRange,::info::Person>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetRecordsByAge<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddRecord<WithSplitStreamingMethod_GetRecordsByAge<Service > > StreamedService;
};

}  // namespace info


#endif  // GRPC_information_2eproto__INCLUDED
